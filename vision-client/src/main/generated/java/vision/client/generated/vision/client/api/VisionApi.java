/*
 * Vision API
 * The Vision component API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package vision.client.generated.vision.client.api;

import vision.client.generated.vision.client.invoker.ApiClient;
import vision.client.generated.vision.client.invoker.ApiException;
import vision.client.generated.vision.client.invoker.ApiResponse;
import vision.client.generated.vision.client.invoker.Pair;

import vision.client.generated.vision.client.model.ModelApiResponse;
import vision.client.generated.vision.client.model.ModelCreateRequest;
import vision.client.generated.vision.client.model.ModelCreateResponse;
import vision.client.generated.vision.client.model.ModelDataCreateRequest;
import vision.client.generated.vision.client.model.ModelDataCreateResponse;
import vision.client.generated.vision.client.model.ModelDataGetAllResponse;
import vision.client.generated.vision.client.model.ModelDataGetResponse;
import vision.client.generated.vision.client.model.ModelDetectRequest;
import vision.client.generated.vision.client.model.ModelDetectResponse;
import vision.client.generated.vision.client.model.ModelGetAllResponse;
import vision.client.generated.vision.client.model.ModelGetResponse;
import vision.client.generated.vision.client.model.ModelTrainGetResponse;
import vision.client.generated.vision.client.model.ModelTrainRequest;
import vision.client.generated.vision.client.model.ModelTrainResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-07-24T17:27:37.459890800+02:00[Europe/Berlin]")
public class VisionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public VisionApi() {
    this(new ApiClient());
  }

  public VisionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  protected ApiException createApiException(HttpResponse<InputStream> response, String msgPrefix) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    if (body != null) {
      msgPrefix += ": " + body;
    }
    return new ApiException(response.statusCode(), msgPrefix, response.headers(), body);
  }

  /**
   * ...
   * ...
   * @param body ... (required)
   * @return ModelCreateResponse
   * @throws ApiException if fails to make API call
   */
  public ModelCreateResponse modelCreate(ModelCreateRequest body) throws ApiException {
    ApiResponse<ModelCreateResponse> localVarResponse = modelCreateWithHttpInfo(body);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param body ... (required)
   * @return ApiResponse&lt;ModelCreateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelCreateResponse> modelCreateWithHttpInfo(ModelCreateRequest body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelCreateRequestBuilder(body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelCreate call received non-success response");
      }
      return new ApiResponse<ModelCreateResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelCreateResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelCreateRequestBuilder(ModelCreateRequest body) throws ApiException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling modelCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param modelDataCreateRequest ... (required)
   * @return ModelDataCreateResponse
   * @throws ApiException if fails to make API call
   */
  public ModelDataCreateResponse modelDataCreate(String modelId, ModelDataCreateRequest modelDataCreateRequest) throws ApiException {
    ApiResponse<ModelDataCreateResponse> localVarResponse = modelDataCreateWithHttpInfo(modelId, modelDataCreateRequest);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param modelDataCreateRequest ... (required)
   * @return ApiResponse&lt;ModelDataCreateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelDataCreateResponse> modelDataCreateWithHttpInfo(String modelId, ModelDataCreateRequest modelDataCreateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDataCreateRequestBuilder(modelId, modelDataCreateRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDataCreate call received non-success response");
      }
      return new ApiResponse<ModelDataCreateResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelDataCreateResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDataCreateRequestBuilder(String modelId, ModelDataCreateRequest modelDataCreateRequest) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDataCreate");
    }
    // verify the required parameter 'modelDataCreateRequest' is set
    if (modelDataCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'modelDataCreateRequest' when calling modelDataCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/data"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modelDataCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param dataId The data ID. (required)
   * @throws ApiException if fails to make API call
   */
  public void modelDataDelete(String modelId, String dataId) throws ApiException {
    modelDataDeleteWithHttpInfo(modelId, dataId);
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param dataId The data ID. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> modelDataDeleteWithHttpInfo(String modelId, String dataId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDataDeleteRequestBuilder(modelId, dataId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDataDelete call received non-success response");
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDataDeleteRequestBuilder(String modelId, String dataId) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDataDelete");
    }
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataId' when calling modelDataDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/data/{dataId}"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()))
        .replace("{dataId}", ApiClient.urlEncode(dataId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param dataId The data ID. (required)
   * @param downloadFile ... (optional)
   * @return ModelDataGetResponse
   * @throws ApiException if fails to make API call
   */
  public ModelDataGetResponse modelDataGet(String modelId, String dataId, String downloadFile) throws ApiException {
    ApiResponse<ModelDataGetResponse> localVarResponse = modelDataGetWithHttpInfo(modelId, dataId, downloadFile);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param dataId The data ID. (required)
   * @param downloadFile ... (optional)
   * @return ApiResponse&lt;ModelDataGetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelDataGetResponse> modelDataGetWithHttpInfo(String modelId, String dataId, String downloadFile) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDataGetRequestBuilder(modelId, dataId, downloadFile);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDataGet call received non-success response");
      }
      return new ApiResponse<ModelDataGetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelDataGetResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDataGetRequestBuilder(String modelId, String dataId, String downloadFile) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDataGet");
    }
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataId' when calling modelDataGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/data/{dataId}"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()))
        .replace("{dataId}", ApiClient.urlEncode(dataId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("downloadFile", downloadFile));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ModelDataGetAllResponse
   * @throws ApiException if fails to make API call
   */
  public ModelDataGetAllResponse modelDataGetAll(String modelId) throws ApiException {
    ApiResponse<ModelDataGetAllResponse> localVarResponse = modelDataGetAllWithHttpInfo(modelId);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ApiResponse&lt;ModelDataGetAllResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelDataGetAllResponse> modelDataGetAllWithHttpInfo(String modelId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDataGetAllRequestBuilder(modelId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDataGetAll call received non-success response");
      }
      return new ApiResponse<ModelDataGetAllResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelDataGetAllResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDataGetAllRequestBuilder(String modelId) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDataGetAll");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/data"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public ModelApiResponse modelDelete(String modelId) throws ApiException {
    ApiResponse<ModelApiResponse> localVarResponse = modelDeleteWithHttpInfo(modelId);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ApiResponse&lt;ModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelApiResponse> modelDeleteWithHttpInfo(String modelId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDeleteRequestBuilder(modelId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDelete call received non-success response");
      }
      return new ApiResponse<ModelApiResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelApiResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDeleteRequestBuilder(String modelId) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param body ... (required)
   * @return ModelDetectResponse
   * @throws ApiException if fails to make API call
   */
  public ModelDetectResponse modelDetect(String modelId, ModelDetectRequest body) throws ApiException {
    ApiResponse<ModelDetectResponse> localVarResponse = modelDetectWithHttpInfo(modelId, body);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param body ... (required)
   * @return ApiResponse&lt;ModelDetectResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelDetectResponse> modelDetectWithHttpInfo(String modelId, ModelDetectRequest body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelDetectRequestBuilder(modelId, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelDetect call received non-success response");
      }
      return new ApiResponse<ModelDetectResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelDetectResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelDetectRequestBuilder(String modelId, ModelDetectRequest body) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelDetect");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling modelDetect");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/detect"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ModelGetResponse
   * @throws ApiException if fails to make API call
   */
  public ModelGetResponse modelGet(String modelId) throws ApiException {
    ApiResponse<ModelGetResponse> localVarResponse = modelGetWithHttpInfo(modelId);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @return ApiResponse&lt;ModelGetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelGetResponse> modelGetWithHttpInfo(String modelId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelGetRequestBuilder(modelId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelGet call received non-success response");
      }
      return new ApiResponse<ModelGetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelGetResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelGetRequestBuilder(String modelId) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @return ModelGetAllResponse
   * @throws ApiException if fails to make API call
   */
  public ModelGetAllResponse modelGetAll() throws ApiException {
    ApiResponse<ModelGetAllResponse> localVarResponse = modelGetAllWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @return ApiResponse&lt;ModelGetAllResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelGetAllResponse> modelGetAllWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelGetAllRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelGetAll call received non-success response");
      }
      return new ApiResponse<ModelGetAllResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelGetAllResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelGetAllRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param modelTrainRequest ... (required)
   * @return ModelTrainResponse
   * @throws ApiException if fails to make API call
   */
  public ModelTrainResponse modelTrain(String modelId, ModelTrainRequest modelTrainRequest) throws ApiException {
    ApiResponse<ModelTrainResponse> localVarResponse = modelTrainWithHttpInfo(modelId, modelTrainRequest);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param modelTrainRequest ... (required)
   * @return ApiResponse&lt;ModelTrainResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelTrainResponse> modelTrainWithHttpInfo(String modelId, ModelTrainRequest modelTrainRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelTrainRequestBuilder(modelId, modelTrainRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelTrain call received non-success response");
      }
      return new ApiResponse<ModelTrainResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelTrainResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelTrainRequestBuilder(String modelId, ModelTrainRequest modelTrainRequest) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelTrain");
    }
    // verify the required parameter 'modelTrainRequest' is set
    if (modelTrainRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'modelTrainRequest' when calling modelTrain");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/train"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(modelTrainRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param trainId The session ID. (required)
   * @return ModelTrainGetResponse
   * @throws ApiException if fails to make API call
   */
  public ModelTrainGetResponse modelTrainGetStatus(String modelId, String trainId) throws ApiException {
    ApiResponse<ModelTrainGetResponse> localVarResponse = modelTrainGetStatusWithHttpInfo(modelId, trainId);
    return localVarResponse.getData();
  }

  /**
   * ...
   * ...
   * @param modelId The model ID. (required)
   * @param trainId The session ID. (required)
   * @return ApiResponse&lt;ModelTrainGetResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelTrainGetResponse> modelTrainGetStatusWithHttpInfo(String modelId, String trainId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = modelTrainGetStatusRequestBuilder(modelId, trainId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw createApiException(localVarResponse, "modelTrainGetStatus call received non-success response");
      }
      return new ApiResponse<ModelTrainGetResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelTrainGetResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder modelTrainGetStatusRequestBuilder(String modelId, String trainId) throws ApiException {
    // verify the required parameter 'modelId' is set
    if (modelId == null) {
      throw new ApiException(400, "Missing the required parameter 'modelId' when calling modelTrainGetStatus");
    }
    // verify the required parameter 'trainId' is set
    if (trainId == null) {
      throw new ApiException(400, "Missing the required parameter 'trainId' when calling modelTrainGetStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/vision/model/{modelId}/train/{trainId}"
        .replace("{modelId}", ApiClient.urlEncode(modelId.toString()))
        .replace("{trainId}", ApiClient.urlEncode(trainId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
